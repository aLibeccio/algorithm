#ifndef __NUMERIC_H__
#define __NUMERIC_H__

/******************************************
 * 求最大值和最小值
 * from include/linux/kernel.h
 *****************************************/
#define MIN(X,Y) ({ \
typeof(X) _X = (X); \
typeof(Y) _Y = (Y); \
(void)(&_X == &_Y);\
_X < _Y ? _X : _Y; })

#define MAX(X,Y) ({ \
typeof(X) _X = (X); \
typeof(Y) _Y = (Y); \
(void)(&_X == &_Y);\
_X > _Y ? _X : _Y; })

/******************************************
 * 返回一个N的倍数，它是比X大的那些数中最小那个
 * 若X本身是N的倍数，则返回X本身
 * N=4,8,16,32
 *****************************************/
#define RND4(X) ((((X)+3) >> 2) << 2)
#define RND8(X) ((((X)+7) >> 3) << 3) 
#define RND16(X) ((((X)+15) >> 4) << 4)
#define RND32(X) ((((X)+31) >> 5) << 5)

/******************************************
 * 返回一个N的倍数，它是比X大的那些数中最小那个
 * 若X本身是N的倍数，则返回比X大的那个
 * N=4,8,16,32
 *****************************************/
#define TOPRND4(X) ((((X)+4) >> 2) << 2)
#define TOPRND8(X) ((((X)+8) >> 3) << 3)
#define TOPRND16(X) ((((X)+16) >> 4) << 4)
#define TOPRND32(X) ((((X)+32) >> 5) << 5)

/******************************************
 * 判断一个数是否是2的幂次
 *****************************************/
#define ISPOW2(X) ((X)-1)&(X)?0:1

/******************************************
 * 返回数组元素的个数
 *****************************************/
#define ARRSIZE(X) (sizeof((X))/sizeof((X[0]))) 

#endif
